{"title":"jQuery源码解读——笔记","date":"2017-08-01T16:00:00.000Z","author":"Chambers","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521383192745&di=2c65da446b739ad2a5667c577b6f799d&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fimgad%2Fpic%2Fitem%2Fa044ad345982b2b7bc05f4e93aadcbef76099b01.jpg","excerpt":"","slug":"jQuery源码解读笔记","comments":true,"dropcap":true,"tags":["js","jquery"],"categories":["js"],"updated":"2018-03-18T11:39:49.553Z","content":"<p><strong>1.立即调用表达式</strong></p>\n<p>任何库与框架设计的第一个要点就是解决命名空间与变量污染的问题。jQuery就是利用了JavaScript函数作用域的特性，采用立即调用表达式包裹了自身的方法来解决这个问题。</p>\n<p><strong>写法1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(window,factory)&#123;</span><br><span class=\"line\">    factory(window);</span><br><span class=\"line\">&#125;(this,function()&#123;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        //jQuery调用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>写法1主要是为了判断jQuery在不同平台的下的加载逻辑，主流的库一般都有对 AMD 和 CommonJS 的支持代码。</p>\n<p><strong>写法2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var factory = function()&#123;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var jQuery = factory();</span><br></pre></td></tr></table></figure>\n<p><strong>写法3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(window,undefined)&#123;</span><br><span class=\"line\">    var jQuery = function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    window.jQuery = window.$ = jQuery;</span><br><span class=\"line\">&#125;)(window);</span><br></pre></td></tr></table></figure>\n<p>传递参数undefined的原因是：<br>Javascript 中的undefined并不是作为关键字，因此可以允许用户对其赋值，为了避免有人在外面给undefined赋了值，所以我们就把它设置为参数。设置undefined参数后，函数内部它默认就是undefined，不会产生歧义。</p>\n<h3 id=\"–未完待续–\"><a href=\"#–未完待续–\" class=\"headerlink\" title=\"–未完待续–\"></a>–未完待续–</h3>","prev":{"title":"web性能优化","slug":"web性能优化"},"next":{"title":"fl效果器","slug":"fl效果器"}}