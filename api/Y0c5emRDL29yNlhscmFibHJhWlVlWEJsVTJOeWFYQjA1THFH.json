{"title":"该学学TypeScript了","date":"2018-11-01T16:00:00.000Z","author":"Chambers","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1541072741&di=73adf9afd63f9692526c5e450dd8450c&imgtype=jpg&er=1&src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01010556d5b9b06ac7252ce6e1cf5b.jpg%401280w_1l_2o_100sh.jpg","excerpt":"","slug":"该学学TypeScript了","comments":true,"dropcap":false,"tags":["TypeScript"],"categories":["js"],"updated":"2018-10-26T11:56:51.370Z","content":"<h2 id=\"一、入门介绍\"><a href=\"#一、入门介绍\" class=\"headerlink\" title=\"一、入门介绍\"></a>一、入门介绍</h2><h3 id=\"1-基础类型\"><a href=\"#1-基础类型\" class=\"headerlink\" title=\"1.基础类型\"></a>1.基础类型</h3><p>先来看看它是怎么声明基础类型的type的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//布尔</span><br><span class=\"line\">const is: boolean = true;</span><br><span class=\"line\">//数值</span><br><span class=\"line\">const isN: number = 110;</span><br><span class=\"line\">//字符串</span><br><span class=\"line\">const isS: string = &quot;&quot;;</span><br><span class=\"line\">//数组</span><br><span class=\"line\">const isA: Array&lt;any&gt; = [];</span><br><span class=\"line\">const isA: any[] = [];</span><br><span class=\"line\">//null</span><br><span class=\"line\">const isNull: null = null;</span><br><span class=\"line\">//undefined</span><br><span class=\"line\">const isUndefined: undefined = undefined;</span><br><span class=\"line\">//元组</span><br><span class=\"line\">const x: [string, number] = [&quot;hello&quot;, 110]; </span><br><span class=\"line\">//枚举</span><br><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">  Red,</span><br><span class=\"line\">  Green,</span><br><span class=\"line\">  Blue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Color &#123;</span><br><span class=\"line\">  Red = &quot;red&quot;,</span><br><span class=\"line\">  Green = &quot;green&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//any</span><br><span class=\"line\">let Ans: any = 4;</span><br><span class=\"line\">let Ans: any = &quot;4&quot;;</span><br><span class=\"line\">//void</span><br><span class=\"line\">let unusable: void = undefined;</span><br><span class=\"line\">//利用解构</span><br><span class=\"line\">function a([f,s]:[number,string])&#123;&#125;;</span><br><span class=\"line\">let &#123; a, b &#125;: &#123;a:number, b: number &#125; = o;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"2-函数＆类\"><a href=\"#2-函数＆类\" class=\"headerlink\" title=\"2.函数＆类\"></a>2.函数＆类</h3><p>函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//限定函数入出参的类型</span><br><span class=\"line\">function sum(x: number, y: number): number &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//可选参数和默认参数</span><br><span class=\"line\">function sum(x: number = 2, y?: number): number &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//解构参数</span><br><span class=\"line\">function sum(...num: number[]): number &#123;</span><br><span class=\"line\">  return num[0] + num[1];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>类：</p>\n<p>主要是几个修饰符的问题：</p>\n<p>public 外部程序可以自由的访问</p>\n<p>private 外部程序不可以自由的访问</p>\n<p>protected 与 private 类似，唯一的不同是它可以在派生类中自由的访问</p>\n<p>readonly 与词同意，只读</p>\n<p>static 静态属性或方法</p>\n<p>get/set getter/setter钩子（唯一要注意的是如果只定义了 get 钩子而没有定义 set 钩子的话，这个属性将是 readonly）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    public country: string;</span><br><span class=\"line\">    private age: number;</span><br><span class=\"line\">    protected name: string;</span><br><span class=\"line\">    constructor(country: string)&#123;</span><br><span class=\"line\">        this.country = country;</span><br><span class=\"line\">        this.name = &apos;cmh&apos;;</span><br><span class=\"line\">        this.age = 18;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    output() &#123;</span><br><span class=\"line\">        return this.country;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    get fullName(): string &#123;</span><br><span class=\"line\">        return this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    set fullName(newValue: string) &#123;</span><br><span class=\"line\">        this.name = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抽象类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract class Department &#123;</span><br><span class=\"line\">    constructor(public name: string) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printName(): void &#123;</span><br><span class=\"line\">        console.log(&apos;Department name: &apos; + this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    abstract printMeeting(): void; // 必须在派生类中实现</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class AccountingDepartment extends Department &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        super(&apos;Accounting and Auditing&apos;); // 在派生类的构造函数中必须调用 super()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printMeeting(): void &#123;</span><br><span class=\"line\">        console.log(&apos;The Accounting Department meets each Monday at 10am.&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    generateReports(): void &#123;</span><br><span class=\"line\">        console.log(&apos;Generating accounting reports...&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-接口\"><a href=\"#3-接口\" class=\"headerlink\" title=\"3.接口\"></a>3.接口</h3><p>接口规范了应用对象的类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ISum &#123;</span><br><span class=\"line\">    readonly x: number;</span><br><span class=\"line\">    y?: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sum (&#123; x, y &#125;: ISum): number &#123;</span><br><span class=\"line\">    return x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IAb &#123;</span><br><span class=\"line\">  a: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IBc extends IAb &#123;</span><br><span class=\"line\">  b: string;</span><br><span class=\"line\">  c: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>索引类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IArrayC &#123;</span><br><span class=\"line\">    [index: number]: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const c: IArrayC = [&quot;icepy&quot;, &quot;hunan&quot;];</span><br><span class=\"line\">c[0];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface IObjectO &#123;</span><br><span class=\"line\">    [key: string]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const o: IObjectO = &#123;</span><br><span class=\"line\">    age: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o[age]</span><br></pre></td></tr></table></figure></p>\n<p>implements接口实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ClockInterface &#123;</span><br><span class=\"line\">    currentTime: Date;</span><br><span class=\"line\">    setTime(d: Date): void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Clock implements ClockInterface &#123;</span><br><span class=\"line\">    currentTime: Date;</span><br><span class=\"line\">    constructor() &#123; </span><br><span class=\"line\">        this.currentTime = new Date();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTime(d: Date) &#123;</span><br><span class=\"line\">        this.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>PS：as类型断言。<br>告诉编译器，我认为这个对象是XXX类型的，你别瞎操心了。要不然由于类型不对，编译器会阻止你赋值，编译的时候直接报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ICheckPoint &#123;</span><br><span class=\"line\">  x: number;</span><br><span class=\"line\">  y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function create(config: ICheckPoint): void &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">create(&#123; xx: 0, x: 0, y: 1 &#125; as ICheckPoint)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"4-泛型\"><a href=\"#4-泛型\" class=\"headerlink\" title=\"4.泛型\"></a>4.泛型</h3><p>基本用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function r&lt;T&gt;(args: T): T &#123;</span><br><span class=\"line\">    return args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r(&quot;cmh&quot;);</span><br><span class=\"line\">r(100);</span><br><span class=\"line\">r(true);</span><br></pre></td></tr></table></figure></p>\n<p>泛型类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class GenericsClass&lt;T&gt;&#123;</span><br><span class=\"line\">  public add?: (x: T, y: T) =&gt; T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const cls = new GenericsClass&lt;number&gt;();</span><br><span class=\"line\">cls.add = (x: number, y: number): number =&gt; &#123;</span><br><span class=\"line\">  return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>泛型约束：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//extends 继承了一个接口进而对泛型的数据结构进行了限制</span><br><span class=\"line\">interface Lengthwise &#123;</span><br><span class=\"line\">  length:number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function loggingIdentity&lt;T extends Lengthwise&gt;(arg:T):T &#123;</span><br><span class=\"line\">  console.log(arg.length)</span><br><span class=\"line\">  return arg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"5-模块类型声明\"><a href=\"#5-模块类型声明\" class=\"headerlink\" title=\"5.模块类型声明\"></a>5.模块类型声明</h3><p>在目前的 Web 前端工程中，大部分情况下我们都会在 JavaScript 引入样式，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;./style.css&quot;</span><br></pre></td></tr></table></figure></p>\n<p>当这样的范例有时候编译器并不能编译通过，也许我们可以定义一个通用的模块，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare module &quot;*.css&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>当然，你也可以使用 require 语句来导入一个样式文件。</p>\n<p>由于在我们的工作中，会引用到很多第三方的模块，由于历史的原因，可能很多第三方模块，用了 AMD 或者 commonjs，或者它们压根就没有 TypeScript 的声明文件，重要的是我们都可以定义一个自己的描述文件，起码可以让程序 Run 起来。</p>\n<p>举例：</p>\n<p>我们在解析一个 url 时用了一个第三方包来完成，但是当他将第三方包引入到工程中时发现报错了，于是他自己定义了一个模块声明来处理这个错误，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare module &quot;url&quot; &#123;</span><br><span class=\"line\">  export function parse(urlStr: string) =&gt; string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以在工程中创建一个 typing 目录，编译器会自动的读取这个声明文件。</p>\n<p>但是目前看起来工程中的错误，还是没有解决，因为它是一个 commonjs 的模块，由于 commonjs 中定义了 module.exports 和 exports，根据官方给出的建议是使用 var d = require(“xxx”)，但是对于有风格洁癖的人来说，这很不好看，但是我们可以从中遵循它的规则，由于 exports 的关系，以及现代编译器编译的规则，假设是导出了主模块，那么我们可以使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import g from &quot;xx&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">g.default()</span><br></pre></td></tr></table></figure></p>\n<p>假设，我们的 commonjs 是使用的 exports ，那么我们可以使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as g from &quot;xx&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>来解决这个问题。</p>\n<hr>\n<h3 id=\"6-type\"><a href=\"#6-type\" class=\"headerlink\" title=\"6.type\"></a>6.type</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Easing = &quot;ease-in&quot; | &quot;ease-out&quot; | &quot;ease-in-out&quot;;</span><br><span class=\"line\">function animation(dur: number, easing: Easing)&#123;</span><br><span class=\"line\">    if (easing === &quot;ease-in&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (easing === &quot;ease-out&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (easing === &quot;ease-in-out&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Error(&quot;animation easing error&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"二、与React结合\"><a href=\"#二、与React结合\" class=\"headerlink\" title=\"二、与React结合\"></a>二、与React结合</h2><h3 id=\"无状态组件\"><a href=\"#无状态组件\" class=\"headerlink\" title=\"无状态组件\"></a>无状态组件</h3><p>无状态组件指的是没有自身的state的组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export interface IProps &#123;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export const Bar: React.SFC&lt;IProps&gt; = (props: IProps) =&gt; &#123;</span><br><span class=\"line\">    const &#123;name, age&#125; = props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;name&#125;&lt;span&gt;</span><br><span class=\"line\">            &lt;span&gt;&#123;age&#125;&lt;span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"有状态组件\"><a href=\"#有状态组件\" class=\"headerlink\" title=\"有状态组件\"></a>有状态组件</h3><p>既有props，又有state的一般组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export interface IProps &#123;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export interface IState &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Bar extends React.Component&lt;IProps, IState&gt; &#123;</span><br><span class=\"line\">  constructor(props: IProps) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      name: &quot;&quot;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public setName = () =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      name: &quot;chambers&quot;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public render()&#123;</span><br><span class=\"line\">    const &#123; name &#125; = this.state;</span><br><span class=\"line\">    const &#123; age &#125; = this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">         &lt;div onClick=&#123;this.setName&#125;&gt; set name &lt;/div&gt;</span><br><span class=\"line\">         &lt;div&gt;&#123;name&#125; &#123;age&#125;&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Router组件\"><a href=\"#Router组件\" class=\"headerlink\" title=\"Router组件\"></a>Router组件</h3><p>当要使用到react-router上的props时，往往要继承一下它的type。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export interface IProps extends RouteComponentProps&lt;any&gt;&#123;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export interface IState &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Bar extends React.Component&lt;IProps, IState&gt; &#123;</span><br><span class=\"line\">  constructor(props: IProps) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      name: &quot;&quot;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public routeTo = () =&gt; &#123;</span><br><span class=\"line\">    this.props.history.push(&quot;/&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public render()&#123;</span><br><span class=\"line\">    const &#123; name &#125; = this.state;</span><br><span class=\"line\">    const &#123; age &#125; = this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">         &lt;div onClick=&#123;this.routeTo&#125;&gt; route to &lt;/div&gt;</span><br><span class=\"line\">         &lt;div&gt;&#123;name&#125; &#123;age&#125;&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","next":{"title":"canvas世界","slug":"canvas世界"}}