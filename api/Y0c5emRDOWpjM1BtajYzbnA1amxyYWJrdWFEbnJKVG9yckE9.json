{"title":"CSS揭秘学习笔记","date":"2017-06-16T16:00:00.000Z","author":"Chambers","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524991627&di=14aba4d55317507c1c1bf3f0b7c21312&imgtype=jpg&er=1&src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01ec6855420ce80000019ae9b03085.jpg","excerpt":"","slug":"css揭秘学习笔记","comments":true,"dropcap":true,"tags":["CSS揭秘"],"categories":["css"],"updated":"2018-05-10T12:37:15.301Z","content":"<p><strong>一、关于自适应媒体查询</strong></p>\n<p>下面还有一些建议，可能会帮你避免不必要的媒体查询。</p>\n<p>1.尝试使用与视口相关的单位（vw、vh、vmin和vmax），它们的值解析为视口宽度或高度的百分比。</p>\n<p>2.当你需要在较大分辨率下得到固定宽度时，使用max-width而不是width，因为它可以适应较小的分辨率，而无需使用媒体查询。</p>\n<p>3.不要忘记为替换元素（比如img、object、video、iframe等）设置一个max-width，值为100%。</p>\n<p>4.假如背景图片需要完整地铺满一个容器，不管容器的尺寸如何变化，background-size:cover这个属性都可以做到。但是，我们也要时刻牢记——带宽并不是无限的，因此在移动网页中通过CSS把一张大图缩小显示往往是不太明智的。</p>\n<p>5.当图片（或其他元素）以行列式进行布局时，让视口的宽度来决定列的数量。弹性盒布局（即Flexbox）或者display:inline-block加上常规的文本折行行为，都可以实现这一点。</p>\n<p>6.在 使 用 多 列 文 本 时，指定column-width（列 宽）而 不 是 指 定column-count（列数），这样它就可以在较小的屏幕上自动显示为单列布局。</p>\n<hr>\n<p><strong>二、半透明边框</strong></p>\n<p>默认状态下，背景会延伸到边框的区域下层。</p>\n<p>我们可以通过background-clip属性来调整上述默认行为所带来的不便。这个属性的初始值是border-box，意味着背景会被元素的border  box（边框的外沿框）裁切掉。如果不希望背景侵入边框所在的范围，我们要做的就是把它的值设为padding-box，这样浏览器就会用内边距的外沿来把背景裁切掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border:10px solid hsla(0,0%,100%,.5);</span><br><span class=\"line\">background:white;</span><br><span class=\"line\">background-clip:padding-box;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>三、利用投影实现多重边框</strong></p>\n<p>唯一需要注意的是，box-shadow是层层叠加的，第一层投影位于最顶层，依次类推。因此，你需要按此规律调整扩张半径。比如说，在前面的代码中，我们想在外圈再加一道5px的外框，那就需要指定扩张半径的值为15px（10px+5px）。如果你愿意，甚至还可以在这些“边框”的底下再加一层常规的投影：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:yellowgreen;</span><br><span class=\"line\">box-shadow:0 0 0 10px #655,</span><br><span class=\"line\">0 0 0 15px deeppink,</span><br><span class=\"line\">0 2px 5px 15px rgba(0,0,0,.6);</span><br></pre></td></tr></table></figure>\n<p>投影的行为跟边框不完全一致，因为它不会影响布局，而且也不会受到box-sizing属性的影响。不过，你还是可以通过内边距或外边距（这取决于投影是内嵌和还是外扩的）来额外模拟出边框所需要占据的空间。</p>\n<p>上述方法所创建出的假“边框”出现在元素的外圈。它们并不会响应鼠标事件，比如悬停或点击。如果这一点非常重要，你可以给box-shadow属性加上inset关键字，来使投影绘制在元素的内圈。请注意，此时你需要增加额外的内边距来腾出足够的空隙。</p>\n<hr>\n<p><strong>四、background-position</strong></p>\n<p>举例来说，如果想让背景图片跟右边缘保持20px的偏移量，同时跟底边保持10px的偏移量，同时兼容不支持这一特性的浏览器时，可以这样做:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:url(code-pirate.svg) no-repeat bottom right #58a;</span><br><span class=\"line\">background-position:right 20px bottom 10px;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>五、利用background-origin改变背景区域</strong></p>\n<p>在网页开发生涯中，你很可能多次写过类似background-position: top  left;这样的代码。你是否曾经有过疑惑：这个top  left到底是哪个左上角？你可能知道，每个元素身上都存在三个矩形框：border box（边框的外沿框）、paddingbox（内边距的外沿框）和content box（内容区的外沿框）。那background-position这个属性指定的到底是哪个矩形框的左上角？</p>\n<p>默认情况下，background-position是以paddingbox为准的，这样边框才不会遮住背景图片。因此，topleft默认指的是padding  box的左上角。不过，我们得到了一个新的属性background-origin，可以用它来改变这种行为。在默认情况下，它的值是（闭着眼睛也猜得到）padding-box。如果把它的值改成content-box（参见下面的代码），我们在background-position属性中使用的边角关键字将会以内容区的边缘作为基准（也就是说，此时背景图片距离边角的偏移量就跟内边距保持一致了）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding:10px;</span><br><span class=\"line\">background:url(&quot;code-pirate.svg&quot;) no-repeat #58a</span><br><span class=\"line\">bottom right; /* 或100% 100% */</span><br><span class=\"line\">background-origin:content-box;</span><br></pre></td></tr></table></figure>\n<p>这样就可以实现跟第四点一样的效果。</p>\n<hr>\n<p><strong>六、calc()</strong></p>\n<p>请不要忘记在calc()函数内部的-和+运算符的两侧各加一个空白符，否则会产生解析错误！这个规则如此怪异，是为了向前兼容：未来，在calc()内部可能会允许使用关键字，而这些关键字可能会包含连字符。</p>\n<p>让我们回顾一下本节开头的挑战：把背景图片定位到距离底边10px且距离右边20px的位置。如果我们仍然以左上角偏移的思路来考虑，其实就是希望它有一个100%  -20px的水平偏移量，以及100%  -  10px的垂直偏移量。谢天谢地，calc()函数允许我们执行此类运算，它可以完美地在background-position属性中使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:url(&quot;code-pirate.svg&quot;) no-repeat;</span><br><span class=\"line\">background-position:calc(100% - 20px)calc(100% - 10px);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>七、利用linear-gradient实现多色条纹背景</strong></p>\n<p>如果我们把第二个色标的位置值设置为0，那它的位置就总是会被浏览器调整为前一个色标的位置值。</p>\n<p>水平条纹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:linear-gradient(#fb3 33.3%,#58a 0,#58a 66.6%,yellowgreen 0);</span><br><span class=\"line\">background-size:100% 45px;</span><br></pre></td></tr></table></figure>\n<p>垂直条纹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:linear-gradient(to right, /* 或90deg */</span><br><span class=\"line\">#fb3 50%,#58a 0);</span><br><span class=\"line\">background-size:30px 100%;</span><br></pre></td></tr></table></figure>\n<p>斜向条纹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:linear-gradient(45deg,</span><br><span class=\"line\">#fb3 25%,#58a 0,#58a 50%,</span><br><span class=\"line\">#fb3 0,#fb3 75%,#58a 0);</span><br><span class=\"line\">background-size:30px 30px;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>八、border-radius</strong></p>\n<p>说到border-radius，有一个鲜为人知的真相：它可以单独指定水平和垂直半径，只要用一个斜杠（/）分隔这两个值即可。这个特性允许我们在拐角处创建椭圆圆角（参见图3-3）。因此，如果我们有一个尺寸为200px×150px的元素，就可以把它圆角的两个半径值分别指定为元素宽高的一半，从而得到一个精确的椭圆：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-radius:100px /75px;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>九、平行四边形</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;button&quot;&gt;按钮1&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.button &#123;</span><br><span class=\"line\">position:relative;</span><br><span class=\"line\">display:inline-block;</span><br><span class=\"line\">/* 其他的文字颜色、内边距等样式……*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.button::before &#123;</span><br><span class=\"line\">content: &apos;&apos;; /* 用伪元素来生成一个矩形*/</span><br><span class=\"line\">position:absolute;</span><br><span class=\"line\">top:0; right:0; bottom:0; left:0;</span><br><span class=\"line\">z-index: -1;</span><br><span class=\"line\">background:#58a;</span><br><span class=\"line\">transform:skew(45deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>十、菱形相册</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.picture &#123;</span><br><span class=\"line\">width:400px;</span><br><span class=\"line\">transform:rotate(45deg);</span><br><span class=\"line\">overflow:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.picture &gt;img &#123;</span><br><span class=\"line\">max-width:100%;</span><br><span class=\"line\">transform: rotate(-45deg)scale(1.42);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，可以用clip-path的方法来实现，它还可以参与动画：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img &#123;</span><br><span class=\"line\">clip-path:polygon(50% 0,100% 50%,</span><br><span class=\"line\">50% 100%,0 50%);</span><br><span class=\"line\">transition:1s clip-path;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img:hover &#123;</span><br><span class=\"line\">clip-path:polygon(0 0,100% 0,</span><br><span class=\"line\">100% 100%,0 100%);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>十一、切角实现</strong></p>\n<p>四个角都是切角：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:#58a;</span><br><span class=\"line\">background:</span><br><span class=\"line\">linear-gradient(135deg,transparent 15px,#58a 0)</span><br><span class=\"line\">top left,</span><br><span class=\"line\">linear-gradient(-135deg,transparent 15px,#58a 0)</span><br><span class=\"line\">top right,</span><br><span class=\"line\">linear-gradient(-45deg,transparent 15px,#58a 0)</span><br><span class=\"line\">bottom right,</span><br><span class=\"line\">linear-gradient(45deg,transparent 15px,#58a 0)</span><br><span class=\"line\">bottom left;</span><br><span class=\"line\">background-size:50% 50%;</span><br><span class=\"line\">background-repeat:no-repeat;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>十二、单行打字动画</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes typing &#123;</span><br><span class=\"line\">    from &#123; width: 0 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes caret &#123;</span><br><span class=\"line\">    50% &#123; border-right-color: transparent; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1 &#123;</span><br><span class=\"line\">    font: bold 200% Consolas, Monaco, monospace;</span><br><span class=\"line\">    /*width: 8.25em;*/</span><br><span class=\"line\">    width: 15ch;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    border-right: .05em solid;</span><br><span class=\"line\">    animation: typing 8s steps(15),</span><br><span class=\"line\">               caret 1s steps(1) infinite;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"fl效果器","slug":"fl效果器"},"next":{"title":"Hello World","slug":"hello-world"}}