{"title":"一探Webpack模块化机制","date":"2018-07-11T16:00:00.000Z","author":"Chambers","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1525511681475&di=c14a5d0b29f988ade21bd05127563b5a&imgtype=0&src=http%3A%2F%2Fpic.58pic.com%2F58pic%2F14%2F03%2F49%2F82W58PICjQC_1024.jpg","excerpt":"","slug":"一探Webpack模块化机制","comments":true,"dropcap":false,"tags":["webpack","模块化"],"categories":["js"],"updated":"2018-09-11T06:19:48.658Z","content":"<h2 id=\"Webpack模块化\"><a href=\"#Webpack模块化\" class=\"headerlink\" title=\"Webpack模块化\"></a>Webpack模块化</h2><p>对于webpack的模块化的实现，我们可以大致分为三种类型：<strong>commonjs</strong>，<strong>es6 Module</strong>，<strong>code splitting</strong>。</p>\n<hr>\n<h3 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h3><p>当我们在代码中使用到commonjs的模块化时，webpack就会用hack的手段帮我们处理好这些模块的关系，例如，我们写出这样的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">//假设index.js是webpack的打包入口文件</span><br><span class=\"line\">var a = require(&apos;./a&apos;);</span><br><span class=\"line\">console.log(a.name);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//a.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    name:&apos;cmh&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后经过webpack的打包转化，大概会生成这样的代码（简化版）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个IIFE</span><br><span class=\"line\">//参数modules是存放着各模块的一个json</span><br><span class=\"line\">(function (modules) &#123;</span><br><span class=\"line\">    //存放模块缓存的对象</span><br><span class=\"line\">    var installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //webpack实现的require，参数是传入一个你要require的模块的id</span><br><span class=\"line\">    function __webpack_require__(moduleId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //如果这个模块已经缓存过，那就直接返回它的exports</span><br><span class=\"line\">        if(installedModules[moduleId]) &#123;</span><br><span class=\"line\">            return installedModules[moduleId].exports;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //没有的话就进行缓存模块</span><br><span class=\"line\">        var module = installedModules[moduleId] = &#123;</span><br><span class=\"line\">            i: moduleId,    //模块id</span><br><span class=\"line\">            l: false,       //模块是否被加载了</span><br><span class=\"line\">            exports: &#123;&#125;     //重写exports，即导出的内容</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        //执行这个要被require的函数</span><br><span class=\"line\">        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">        //标志模块被加载了</span><br><span class=\"line\">        module.l = true;</span><br><span class=\"line\"></span><br><span class=\"line\">        //返回导出</span><br><span class=\"line\">        return module.exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //最后再返回导入入口文件</span><br><span class=\"line\">    return __webpack_require__(__webpack_require__.s = &quot;./index.js&quot;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">&quot;./a.js&quot;:(function(module,exports)&#123;</span><br><span class=\"line\">    eval(&quot;module.exports = &#123;name:&apos;cmh&apos;&#125;&quot;);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&quot;./index.js&quot;:(function(module,exports,__webpack_require__)&#123;</span><br><span class=\"line\">    eval(</span><br><span class=\"line\">        &quot;var a = __webpack_require__(/*! ./a */ \\&quot;./a.js\\&quot;);</span><br><span class=\"line\">        console.log(a.name);&quot;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li>定义了installedModules ，这个变量被用来缓存已加载的模块。</li>\n<li>定义了<strong>webpack_require</strong>这个函数，函数参数为模块的id。这个函数用来实现模块的require。</li>\n<li>webpack_require函数首先会检查是否缓存了已加载的模块，如果有则直接返回缓存模块的exports。</li>\n<li><p>如果没有缓存，也就是第一次加载，则首先初始化模块，并将模块进行缓存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: false,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后调用模块函数，也就是前面webpack对我们的模块的包装函数，将module、module.exports和<strong>webpack_require</strong>作为参数传入。注意这里做了一个动态绑定，将模块函数的调用对象绑定为module.exports，这是为了保证在模块中的this指向当前模块。</p>\n</li>\n<li>调用完成后，模块标记为已加载。</li>\n<li>返回模块exports的内容。</li>\n<li>利用前面定义的<strong>webpack_require</strong>函数，require入口模块，在这里是index.js。</li>\n</ol>\n<p>可以看到，这是一个立即执行函数，它会把各个模块函数当作参数传入到这个函数当中，然后经过对require，module.exports这些的处理（详情看上面代码的注释），就完成了对模块的require，然后这个模块又会根据自己对其他模块的require，依次加载其他模块，最终形成一个依赖网状结构。webpack管理着这些模块的缓存，如果一个模块被require多次，那么只会有一次加载过程，而返回的是缓存的内容，这也是commonjs的规范。</p>\n<hr>\n<h3 id=\"es6-Module\"><a href=\"#es6-Module\" class=\"headerlink\" title=\"es6 Module\"></a>es6 Module</h3><p>然后再来看看当我们在代码中使用到es6的模块化时，webpack会怎么处理？<br>例如，我们写出这样的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">//入口文件</span><br><span class=\"line\">import bar from &apos;./a&apos;;</span><br><span class=\"line\">import &#123;foo&#125; from &apos;./a&apos;;</span><br><span class=\"line\">bar();</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//a.js</span><br><span class=\"line\">export function foo()&#123;</span><br><span class=\"line\">    return &apos;foo&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default function bar()&#123;</span><br><span class=\"line\">    return &apos;bar&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后说说它跟commonjs转换的不同之处（相同的就不赘述了）<br>主要的不同之处在于传入的模块的解析部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里先放几个在说明过程中需要用到的函数：</span><br><span class=\"line\"></span><br><span class=\"line\">//1.r函数</span><br><span class=\"line\">//通过Object.defineProperty在__webpack_exports__上添加属性__esModule</span><br><span class=\"line\">//值为true，表明这是一个es模块。（在commonjs和es6Module混用时会用到，在这里暂时没用）</span><br><span class=\"line\">__webpack_require__.r = function(exports) &#123;</span><br><span class=\"line\">    Object.defineProperty(exports, &apos;__esModule&apos;, &#123; value: true &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//2.d函数</span><br><span class=\"line\">//export default和export都被转换成了类似于commonjs的exports.xxx，</span><br><span class=\"line\">//export对象变为__webpack_exports__的属性。</span><br><span class=\"line\">__webpack_require__.d = function(exports, name, getter) &#123;</span><br><span class=\"line\">    if(!__webpack_require__.o(exports, name)) &#123;</span><br><span class=\"line\">        Object.defineProperty(exports, name, &#123;</span><br><span class=\"line\">            configurable: false,</span><br><span class=\"line\">            enumerable: true,</span><br><span class=\"line\">            get: getter</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//模块部分</span><br><span class=\"line\">//在这里用到的r,d函数在上面有说明</span><br><span class=\"line\">&quot;./a.js&quot;:(function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\">    &quot;use strict&quot;;</span><br><span class=\"line\">    eval(&quot;</span><br><span class=\"line\">        __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">        __webpack_require__.d(__webpack_exports__, \\&quot;foo\\&quot;, function() &#123; return foo; &#125;);</span><br><span class=\"line\">        __webpack_require__.d(__webpack_exports__, \\&quot;default\\&quot;, function() &#123; return bar; &#125;);</span><br><span class=\"line\">        function foo()&#123;return &apos;foo&apos;;&#125;</span><br><span class=\"line\">        function bar()&#123;return &apos;bar&apos;;&#125;</span><br><span class=\"line\">    &quot;)</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&quot;./index.js&quot;:(function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\">    &quot;use strict&quot;;</span><br><span class=\"line\">    eval(&quot;</span><br><span class=\"line\">        __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">        var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \\&quot;./a.js\\&quot;);</span><br><span class=\"line\">        Object(_a__WEBPACK_IMPORTED_MODULE_0__[\\&quot;default\\&quot;])();</span><br><span class=\"line\">        Object(_a__WEBPACK_IMPORTED_MODULE_0__[\\&quot;foo\\&quot;])()</span><br><span class=\"line\">    &quot;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"步骤：-1\"><a href=\"#步骤：-1\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ol>\n<li>前面讲commonjs的时候已经分析过了，webpack生成的代码是一个IIFE，这个IIFE完成一系列初始化工作后，就会通过<code>__webpack_require__(__webpack_require__.s = &quot;./index.js&quot;)</code>启动入口模块。这个跟前面一样。</li>\n<li>然后就是通过<strong>webpack_require</strong>(‘./a.js’)导入a.js模块，再然后通过module.xxx获取a.js中export的对应属性。注意这里有一个重要的点，就是所有引入的模块属性都会用Object()包装成对象，这是为了保证像Boolean、String、Number这些基本数据类型转换成相应的类型对象。</li>\n<li>为什么可以通过module.xxx拿到a.js中export的值呢？就是因为webpack通过d函数把a.js的export对象变为a模块的exports属性，这样就能拿到了。</li>\n</ol>\n<hr>\n<h3 id=\"通过import-进行code-splitting\"><a href=\"#通过import-进行code-splitting\" class=\"headerlink\" title=\"通过import()进行code splitting\"></a>通过import()进行code splitting</h3><p>webpack提供了import()的方法可以让我们对代码进行分割。<br>比如，我们可以利用这点来实现Vue组件的懒加载：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Foo = () =&gt; import(&apos;./Foo.vue&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>ps:注意：如果您使用的是 Babel，你将需要添加 syntax-dynamic-import 插件，才能使 Babel 可以正确地解析语法。</p>\n<p>那么，它的实现原理是怎样的呢？<br>首先，我们先新建两个文件：入口文件index.js和模块文件a.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">import(&apos;./a&apos;).then((foo)=&gt;&#123;</span><br><span class=\"line\">    console.log(foo())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//a.js</span><br><span class=\"line\">exports.foo = function()&#123;</span><br><span class=\"line\">    return &apos;a&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后打包，我们发现这次的打包跟之前的不一样的是它生成了两个文件：<br>主文件index.js和模块文件0.js</p>\n<h4 id=\"主文件index-js：\"><a href=\"#主文件index-js：\" class=\"headerlink\" title=\"主文件index.js：\"></a>主文件index.js：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这次没了a，是因为它被分离到另一个文件中去了</span><br><span class=\"line\">&quot;./index.js&quot;:(function(module, exports, __webpack_require__) &#123;</span><br><span class=\"line\">    eval(&quot;</span><br><span class=\"line\">        __webpack_require__.e(/*! import() */ 0)</span><br><span class=\"line\">        .then(function() &#123; </span><br><span class=\"line\">            var module = __webpack_require__(/*! ./a */ \\&quot;./a.js\\&quot;); </span><br><span class=\"line\">            return typeof module === \\&quot;object\\&quot; &amp;&amp; module &amp;&amp; module.__esModule ? module : Object.assign(&#123;/* fake namespace object */&#125;, typeof module === \\&quot;object\\&quot; &amp;&amp; module, &#123; \\&quot;default\\&quot;: module &#125;); &#125;)</span><br><span class=\"line\">        .then((foo)=&gt;&#123;console.log(foo())&#125;)</span><br><span class=\"line\">    &quot;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以看出，这个e函数起到了关键作用，并且它还返回promise实现了异步加载。</p>\n<p>接下来我们来看看，e函数是何方神圣：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_require__.e = function requireEnsure(chunkId) &#123;</span><br><span class=\"line\">    var promises = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">    var installedChunkData = installedChunks[chunkId];</span><br><span class=\"line\">    if(installedChunkData !== 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(installedChunkData) &#123;</span><br><span class=\"line\">            promises.push(installedChunkData[2]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            var promise = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">                installedChunkData = installedChunks[chunkId] = [resolve, reject];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            promises.push(installedChunkData[2] = promise);</span><br><span class=\"line\"></span><br><span class=\"line\">            var head = document.getElementsByTagName(&apos;head&apos;)[0];</span><br><span class=\"line\">            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">            script.charset = &apos;utf-8&apos;;</span><br><span class=\"line\">            script.timeout = 120;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (__webpack_require__.nc) &#123;</span><br><span class=\"line\">                script.setAttribute(&quot;nonce&quot;, __webpack_require__.nc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            script.src = jsonpScriptSrc(chunkId);</span><br><span class=\"line\">            var timeout = setTimeout(function()&#123;</span><br><span class=\"line\">                onScriptComplete(&#123; type: &apos;timeout&apos;, target: script &#125;);</span><br><span class=\"line\">            &#125;, 120000);</span><br><span class=\"line\">            script.onerror = script.onload = onScriptComplete;</span><br><span class=\"line\">            function onScriptComplete(event) &#123;</span><br><span class=\"line\">                script.onerror = script.onload = null;</span><br><span class=\"line\">                clearTimeout(timeout);</span><br><span class=\"line\">                var chunk = installedChunks[chunkId];</span><br><span class=\"line\">                if(chunk !== 0) &#123;</span><br><span class=\"line\">                    if(chunk) &#123;</span><br><span class=\"line\">                        var errorType = event &amp;&amp; (event.type === &apos;load&apos; ? &apos;missing&apos; : event.type);</span><br><span class=\"line\">                        var realSrc = event &amp;&amp; event.target &amp;&amp; event.target.src;</span><br><span class=\"line\">                        var error = new Error(&apos;Loading chunk &apos; + chunkId + &apos; failed.\\n(&apos; + errorType + &apos;: &apos; + realSrc + &apos;)&apos;);</span><br><span class=\"line\">                        error.type = errorType;</span><br><span class=\"line\">                        error.request = realSrc;</span><br><span class=\"line\">                        chunk[1](https://cdn.example.com/error?m=webp&q=80);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    installedChunks[chunkId] = undefined;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            head.appendChild(script);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Promise.all(promises);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>e函数主要做了这些事：</p>\n<ol>\n<li>缓存查找：从缓存installedChunks中查找是否有缓存模块，如果缓存标识为0，则表示模块已加载过，直接返回promise；如果缓存为数组，表示缓存正在加载中，则返回缓存的promise对象<br>2.如果没有缓存，则创建一个promise，并将promise和resolve、reject缓存在installedChunks中<br>3.构建一个script标签，append到head标签中，src指向加载的模块脚本资源，实现动态加载js脚本<br>4.添加script标签onload、onerror事件，如果超时或者模块加载失败，则会调用reject返回模块加载失败异常<br>5.如果模块加载成功，则返回当前模块promise，对应于import()</li>\n</ol>\n<h4 id=\"分割出来的模块0-js：\"><a href=\"#分割出来的模块0-js：\" class=\"headerlink\" title=\"分割出来的模块0.js：\"></a>分割出来的模块0.js：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[0],&#123;</span><br><span class=\"line\">    &quot;./a.js&quot;:(function(module, exports) &#123;</span><br><span class=\"line\">        eval(&quot;</span><br><span class=\"line\">            exports.foo = function()&#123;</span><br><span class=\"line\">                return &apos;a&apos;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<p>这里的webpackJsonp类似于jsonp中的callback，作用是作为模块加载和执行完成的回调，从而触发import的resolve。</p>\n<p>从上面我们可以看出，webpack通过<strong>webpack_require</strong>.e函数实现了动态加载，再通过webpackJsonp函数实现异步加载回调，把模块内容以promise的方式暴露给调用方，从而实现了对code splitting的支持。</p>\n","prev":{"title":"深入浅出Rxjs学习笔记","slug":"深入浅出Rxjs学习笔记"},"next":{"title":"读读Koa2源码","slug":"读读Koa2源码"}}