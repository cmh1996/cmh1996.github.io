{"title":"css世界学习笔记","date":"2018-04-01T16:00:00.000Z","author":"Chambers","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524396590262&di=8708cf50c5df6997f341169759b8794c&imgtype=0&src=http%3A%2F%2Fs13.sinaimg.cn%2Fmw690%2F001IutdIgy720PnY5ti5c%26690","excerpt":"","slug":"css世界学习笔记","comments":true,"dropcap":true,"tags":["css"],"categories":["css"],"updated":"2018-04-22T08:42:47.689Z","content":"<h3 id=\"1-盒子双重性\"><a href=\"#1-盒子双重性\" class=\"headerlink\" title=\"1.盒子双重性\"></a>1.盒子双重性</h3><p>按照 display 的属性值不同，值为 block 的元素的盒子实际由外在的“块级盒子” 和内在的“块级容器盒子”组成，值为 inline-block 的元素则由外在的“内联盒子”和内 在的“块级容器盒子”组成，值为 inline 的元素则内外均是“内联盒子”。实际上，如果遵循这种理解，display:block 应该脑补成 display:block-block，display:table 应该脑补成 display:block-table，我们平时的写法实际上是一种简写。<br>下面问题来了：元素都有内外两个盒子， 我们平常设置的 width/height 属性是作用在哪个盒子上的？这个问题也是很简单的，因为在解释内外盒子的时候就已经提到过了：是内在盒子，也就 是“容器盒子”。</p>\n<h3 id=\"2-默认宽度width-auto的表现特性（即不设置宽度的表现）\"><a href=\"#2-默认宽度width-auto的表现特性（即不设置宽度的表现）\" class=\"headerlink\" title=\"2.默认宽度width:auto的表现特性（即不设置宽度的表现）\"></a>2.默认宽度width:auto的表现特性（即不设置宽度的表现）</h3><p><strong>（1）</strong>充分利用可用空间。比方说块级block元素的宽度默认是 100%于父级容器的。</p>\n<p><strong>（2）</strong>收缩与包裹。典型代表就是浮动、绝对定位、inline-block 元素或 table 元素，意为“收缩到合适”，有那么点儿意思，但不够形象，我一直把这种现 象称为“包裹性”。元素尺寸由内部元素决定，但永远小于“包含块”容器的 尺寸。因此，对于一个元素，如果其 display 属性值是 inline-block，那么即使其里面内容 再多，只要是正常文本，宽度也不会超过容器。<br>包裹性例子：<a href=\"http://demo.cssworld.cn/3/2-5.php\" target=\"_blank\" rel=\"noopener\">http://demo.cssworld.cn/3/2-5.php</a></p>\n<p><strong>（3）</strong>收缩到最小。这个最容易出现在 table-layout 为 auto 的表格中。</p>\n<p><strong>（4）</strong>超出容器限制。除非有明确的 width 相关设置，否则上面 3 种情况尺寸都不会主动 超过父级容器宽度的，但是存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联 元素被设置了 white-space:nowrap。</p>\n<h3 id=\"3-min-width和max-width\"><a href=\"#3-min-width和max-width\" class=\"headerlink\" title=\"3.min-width和max-width\"></a>3.min-width和max-width</h3><p>min-width初始值为auto，max-width初始值为none。<br>max-width：<br><img src=\"/2018/04/02/css世界学习笔记/0.png\" alt=\"css世界学习笔记\"><br>上图答案是 256px。style、!important 通通靠边站！因为 max-width 会覆盖 width。<br>ps：如果元素height是auto不确定，那么可以巧用max-width实现“展开收起”效果：<br><img src=\"/2018/04/02/css世界学习笔记/1.png\" alt=\"css世界学习笔记\"><br>min-width：<br><img src=\"/2018/04/02/css世界学习笔记/2.png\" alt=\"css世界学习笔记\"><br>上图中min-width 活下来，max-width 被忽略， 于是，.container 元素表现为至少 1400 像素宽。</p>\n<h3 id=\"4-幽灵空白节点\"><a href=\"#4-幽灵空白节点\" class=\"headerlink\" title=\"4.幽灵空白节点\"></a>4.幽灵空白节点</h3><p>“幽灵空白节点”是内联盒模型中非常重要的一个概念，具体指的是：在 HTML5 文档声明 中，内联元素的所有解析和渲染表现就如同每个行框盒子的前面有一个“空白节点”一样。这 个“空白节点”永远透明，不占据任何宽度，看不见也无法通过脚本获取，就好像幽灵一样， 但又确确实实地存在，表现如同文本节点一样，因此，我称之为“幽灵空白节点”。<br><img src=\"/2018/04/02/css世界学习笔记/3.png\" alt=\"css世界学习笔记\"></p>\n<h3 id=\"5-input-type-’button’-和button的区别\"><a href=\"#5-input-type-’button’-和button的区别\" class=\"headerlink\" title=\"5.input[type=’button’]和button的区别\"></a>5.input[type=’button’]和button的区别</h3><p>区别在什么地方？区别在于两种按钮默认的 white-space 值不一样，前者是 pre，后者是 normal，所表示出来的现象差异就是：当按钮文字足够多的时候，input按钮不会自动换行，button则会。</p>\n<h3 id=\"6-margin-left和margin-right设为auto\"><a href=\"#6-margin-left和margin-right设为auto\" class=\"headerlink\" title=\"6.margin-left和margin-right设为auto\"></a>6.margin-left和margin-right设为auto</h3><p><img src=\"/2018/04/02/css世界学习笔记/4.png\" alt=\"css世界学习笔记\"><br>如果想让某个块状元素右对齐，脑子里不要就一个 float:right，很多时候，marginleft:auto 才是最佳的实践，浮动毕竟是个“小魔鬼”。我甚至可以这么说：margin 属性的 auto 计算就是为块级元素左中右对齐而设计的，和内联元素使用 text-align 控制左中右对 齐正好遥相呼应！ 居中对齐左右同时 auto 计算即可，CSS 如下：<br><img src=\"/2018/04/02/css世界学习笔记/5.png\" alt=\"css世界学习笔记\"></p>\n<h3 id=\"7-尺寸单位ex了解一下\"><a href=\"#7-尺寸单位ex了解一下\" class=\"headerlink\" title=\"7.尺寸单位ex了解一下\"></a>7.尺寸单位ex了解一下</h3><p>ex 是 CSS 中的一个相对单位，指的是小写字母 x 的高度，没错，就是指 x-height。ex 是 CSS 中的一个相对单位，指的是小写字母 x 的高度，没错，就是指 x-height。<br>我们都知道，内联元素默认是基线对齐的，而基线就是 x 的底部，而 1ex 就是一个 x 的高 度。设想一下，假如图标高度就是 1ex，同时背景图片居中，岂不是图标和文字天然垂直居中， 而且完全不受字体和字号的影响？因为 ex 就是一个相对于字体和字号的单位。<br>现在，要让该图标和文字中间位置对齐，你会如 何实现？设定好尺寸，然后使用 vertical-align:middle？这 样虽然也有效果，但是，实际上啰嗦了，借助 ex 单位，我们直接 利用默认的 baseline 基线对齐就可以实现这个效果。<br><img src=\"/2018/04/02/css世界学习笔记/6.png\" alt=\"css世界学习笔记\"><br><img src=\"/2018/04/02/css世界学习笔记/7.png\" alt=\"css世界学习笔记\"></p>\n<h3 id=\"8-多行文字垂直居中\"><a href=\"#8-多行文字垂直居中\" class=\"headerlink\" title=\"8.多行文字垂直居中\"></a>8.多行文字垂直居中</h3><p><img src=\"/2018/04/02/css世界学习笔记/8.png\" alt=\"css世界学习笔记\"><br><img src=\"/2018/04/02/css世界学习笔记/9.png\" alt=\"css世界学习笔记\"></p>\n<h3 id=\"9-line-height的属性值\"><a href=\"#9-line-height的属性值\" class=\"headerlink\" title=\"9.line-height的属性值\"></a>9.line-height的属性值</h3><p><strong>1.数值</strong>，如 line-height:1.5，其最终的计算值是和当前 font-size 相乘后的值。 例如，假设我们此时的 font-size 大小为 14px，则 line-height 计算值是 1.5<em>14px=21px。<br><strong>2.百分比值</strong>，如 line-height:150%，其最终的计算值是和当前 font-size 相乘后 的值。例如，假设我们此时的 font-size 大小为 14px，则 line-height 计算值是 150%</em>14px=21px。<br><strong>3.长度值</strong>，也就是带单位的值，如 line-height:21px 或者 line-height:1.5em 等，此处 em 是一个相对于 font-size 的相对单位，因此，line-height:1.5em 最终的计算值也是和当前font-size相乘后的值。例如，假设我们此时的font-size 大小为 14px，则 line-height 计算值是 1.5*14px=21px。<br>乍一看，似乎 line-height:1.5、line-height:150%和 line-height:1.5em 这 3 种 用法是一模一样的，最终的行高大小都是和font-size计算值，但是，实际上，line-height:1.5 和另外两个有一点儿不同，那就是继承细节有所差别。如果使用数值作为 line-height 的属性值， 那么所有的子元素继承的都是这个值；但是，如果使用百分比值或者长度值作为属性值，那么所有的子元素继承的是最终的计算值。<br><img src=\"/2018/04/02/css世界学习笔记/10.png\" alt=\"css世界学习笔记\"><br>如果我们做的是一个重图文内容展示的网页或者网站，如博客、论坛、 公众号之类的，那一定要使用数值作为单位，考虑到文章阅读的舒适度，line-height 值可 以设置在 1.6～1.8。</p>\n<h3 id=\"10-word-break-break-all和word-wrap-break-word的区别\"><a href=\"#10-word-break-break-all和word-wrap-break-word的区别\" class=\"headerlink\" title=\"10.word-break:break-all和word-wrap:break-word的区别\"></a>10.word-break:break-all和word-wrap:break-word的区别</h3><p>word-break:break-all 的作用是所有的都换行，毫不留情，一点儿空 隙都不放过，而 word-wrap:break-word 则带有怜悯之心，如果这一行文字有可以换 行的点，如空格或 CJK（中文/日文/韩文）之类的，就不打英文单词或字符的主意了，在 这些换行点换行，至于对不对齐、好不好看则不关心，因此，很容易出现一片一片空白区域的情况。<br><img src=\"/2018/04/02/css世界学习笔记/11.png\" alt=\"css世界学习笔记\"></p>\n<h3 id=\"11-隐藏元素的-background-image-到底加不加载呢？\"><a href=\"#11-隐藏元素的-background-image-到底加不加载呢？\" class=\"headerlink\" title=\"11.隐藏元素的 background-image 到底加不加载呢？\"></a>11.隐藏元素的 background-image 到底加不加载呢？</h3><p>想必这是一个很多人都感兴趣的问题。 根据我的测试，一个元素如果 display 计算值为 none，在 IE 浏览器下（IE8～IE11，更 高版本不确定）依然会发送图片请求，Firefox 浏览器不会，至于 Chrome 和 Safari 浏览器则似 乎更加智能一点：如果隐藏元素同时又设置了 background-image，则图片依然会去加载； 如果是父元素的 display 计算值为 none，则背景图不会请求，此时浏览器或许放心地认为这 个背景图暂时是不会使用的。</p>\n<h3 id=\"12-outline\"><a href=\"#12-outline\" class=\"headerlink\" title=\"12.outline\"></a>12.outline</h3><p>万万不可在全局设置 outline:0 none！这样的错误会造成部分场景 下的部分用户产生使用障碍！ 国内很多大站也会犯类似的错误，注意千万不要学习，千万不要模仿！<br>outline 是不占据任何空间的属性。<br>ps:用outline自动填满屏幕剩余空间的应用技巧。<br><img src=\"/2018/04/02/css世界学习笔记/12.png\" alt=\"css世界学习笔记\"></p>\n<p><img src=\"/2018/04/02/css世界学习笔记/13.png\" alt=\"css世界学习笔记\"></p>\n<h3 id=\"13-direction-rtl十分有用\"><a href=\"#13-direction-rtl十分有用\" class=\"headerlink\" title=\"13.direction:rtl十分有用\"></a>13.direction:rtl十分有用</h3><p>ltr 是初始值，表示 left-to-right，就是从左往右的意思。目前东亚以及欧美文字书写就 是从左往右的；rtl 表示 right-to-left，就是从右往左的意思。配合text-align来用在某些场景很有用！另外，配合unicode-bidi 属性也了解一下。</p>\n<h3 id=\"14-writing-mode实现纵向文字\"><a href=\"#14-writing-mode实现纵向文字\" class=\"headerlink\" title=\"14.writing-mode实现纵向文字\"></a>14.writing-mode实现纵向文字</h3><p>配合text-indent可以实现以下效果：<br><img src=\"/2018/04/02/css世界学习笔记/14.png\" alt=\"css世界学习笔记\"></p>\n","next":{"title":"css揭秘学习笔记","slug":"css揭秘学习笔记"}}